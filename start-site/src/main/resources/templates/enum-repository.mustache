package {{package}}.enumeration;

import org.reflections.Reflections;
import org.springframework.stereotype.Component;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

@Component
@SuppressWarnings("rawtypes")
public class EnumRepository {

    private final Map<String, Map<String, Map<String, Object>>> enums;

    public EnumRepository() {
        final Reflections reflections = new Reflections(this.getClass().getPackage().getName());
        final Set<Class<? extends Enum>> subTypesOf = reflections.getSubTypesOf(Enum.class);
        enums = new HashMap<>(subTypesOf.size(), 1);
        for (Class<? extends Enum> aClass : subTypesOf) {
            this.register(aClass);
        }
    }

    private void register(Class<? extends Enum> e) {
        try {
            Method values = e.getMethod("values");
            Enum<?>[] invoke = (Enum<?>[]) values.invoke(null);
            HashMap<String, Map<String, Object>> esEnums = new HashMap<>(12);
            enums.put(e.getSimpleName(), esEnums);
            for (Enum<?> anEnum : invoke) {
                Map<String, Object> properties = new HashMap<>(12);
                esEnums.put(anEnum.name(), properties);
                for (Method method : anEnum.getClass().getDeclaredMethods()) {
                    String methodName = method.getName();
                    final boolean canAccess = method.canAccess(Modifier.isStatic(method.getModifiers()) ? null : anEnum);
                    if (canAccess) {
                        if (methodName.startsWith("get")) {
                            String substring = methodName.substring(3, 4).toLowerCase();
                            properties.put(substring + methodName.substring(4), method.invoke(anEnum));
                            continue;
                        }
                        if (methodName.startsWith("is")) {
                            String substring = methodName.substring(2, 3).toLowerCase();
                            properties.put(substring + methodName.substring(3), method.invoke(anEnum));
                        }
                    }
                }
            }
        } catch (Exception ex) {
            throw new Error("枚举仓库初始化异常", ex);
        }
    }

    public Map<String, Map<String, Map<String, Object>>> getEnums() {
        return enums;
    }
}
