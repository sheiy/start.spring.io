package {{package}}.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcRegistrations;
import org.springframework.boot.web.error.ErrorAttributeOptions;
import org.springframework.boot.web.servlet.error.DefaultErrorAttributes;
import org.springframework.boot.web.servlet.error.ErrorAttributes;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.lang.NonNull;
import org.springframework.util.ClassUtils;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.method.support.ModelAndViewContainer;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;
import org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod;
import {{package}}.annotation.IgnoreLogging;
import {{package}}.api.HealthController;
import {{package}}.tool.ApplicationTools;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.util.Map;

@Configuration
public class CustomWebMvcRegistration implements WebMvcRegistrations {

    private static final Logger log = LoggerFactory.getLogger(CustomWebMvcRegistration.class);

    private static final Long FIVE_SECONDS = 5 * 1000L;
    private static final Long MAX_LENGTH = 1024L;
    private static final String CONTROLLER_PREFIX = HealthController.class.getPackage().getName();
    private static final String NULL = "null";
    private static final String SQUARE_BRACKETS = "[]";
    private static final String LEFT_SQUARE_BRACKET = "[";
    private static final String RIGHT_SQUARE_BRACKET = "]";
    private static final String SERVLET_REQUEST = "ServletRequest";
    private static final String SERVLET_RESPONSE = "ServletResponse";
    private static final String COMMA = ",";
    private static final String LEFT_BRACKET = "(";
    private static final String RIGHT_BRACKET = ")";
    private static final String FILE_START = "File" + LEFT_BRACKET;
    private static final String ORIGINAL_FILE_NAME = "originalFilename";
    private static final String NAME = "name";
    private static final String CONTENT_TYPE = "contentType";
    private static final String SIZE = "size";
    private static final String EQUAL = "=";
    private static final String TOO_LONG_WITH_BRACKETS = "(too long)";
    private static final String TOO_LONG_WITH_SQUARE_BRACKET = "[too long]";
    private static final String REQUEST_BIND = "HTTP请求处理开始:[SN:{},handler={},ip={},request={}]";
    private static final String SLOW_BIND = "发现HTTP请求处理过慢接口:[SN:{},handler={},处理耗时:{}毫秒]";
    private static final String RESPONSE_BIND = "HTTP请求处理结束:[SN:{},handler={},ip={},response={}]";
    private static final String ERROR_BIND = "HTTP请求处理失败:[SN:%s,handler=%s,ip=%s], %s";
    private static final ThreadLocal<String> SN_THREAD_LOCAL = new ThreadLocal<>();
    private static final ThreadLocal<String> HANDLER_THREAD_LOCAL = new ThreadLocal<>();
    private static final ThreadLocal<String> IP_THREAD_LOCAL = new ThreadLocal<>();

    @Bean
    public ErrorAttributes errorAttributes() {
        return new DefaultErrorAttributes() {
            @Override
            public Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {
                removeThreadLocals();
                log.error("发现跳转错误页面，发生未知系统结构异常", getError(webRequest));
                return super.getErrorAttributes(webRequest, options);
            }
        };
    }

    @Override
    public RequestMappingHandlerAdapter getRequestMappingHandlerAdapter() {
        return new RequestMappingHandlerAdapter() {
            @NonNull
            @Override
            protected ServletInvocableHandlerMethod createInvocableHandlerMethod(@NonNull HandlerMethod handlerMethod) {
                return new ServletInvocableHandlerMethod(handlerMethod) {
                    @Override
                    public Object invokeForRequest(@NonNull NativeWebRequest request, ModelAndViewContainer mavContainer,
                                                   @NonNull Object... providedArgs) throws Exception {
                        //请求参数
                        Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);
                        //日志注解
                        boolean ignoreLog = handlerMethod.getMethod().isAnnotationPresent(IgnoreLogging.class)
                                || handlerMethod.getBeanType().isAnnotationPresent(IgnoreLogging.class)
                                || !handlerMethod.getBeanType().getName().startsWith(CONTROLLER_PREFIX);
                        //请求序列号
                        String sn = ApplicationTools.randomUUID();
                        SN_THREAD_LOCAL.set(sn);
                        //发送请求的IP
                        HttpServletRequest servletRequest = null;
                        if (request instanceof ServletWebRequest) {
                            servletRequest = ((ServletWebRequest) request).getRequest();
                        }
                        String ip = ApplicationTools.getIpAddr(servletRequest);
                        IP_THREAD_LOCAL.set(ip);
                        //处理HTTP请求的方法
                        String handler = ClassUtils.getQualifiedMethodName(getMethod(), getBeanType());
                        HANDLER_THREAD_LOCAL.set(handler);
                        /*请求入参日志*/
                        if (!ignoreLog) {
                            String requestParam = argsToString(args);
                            log.info(REQUEST_BIND, sn, handler, ip, requestParam);
                        }
                        //开始处理时间
                        long startTime = System.currentTimeMillis();
                        Object returnValue = doInvoke(args);
                        //处理请求花费时间
                        long cost = System.currentTimeMillis() - startTime;
                        //清理ThreadLocal
                        removeThreadLocals();
                        //慢接口日志
                        if (cost > FIVE_SECONDS) {
                            log.warn(SLOW_BIND, sn, handler, cost);
                        }
                        /*请求结束日志*/
                        if (!ignoreLog) {
                            String response = NULL;
                            if (returnValue != null) {
                                response = returnValue.toString();
                            }
                            String responseString = response.length() > MAX_LENGTH ?
                                    TOO_LONG_WITH_SQUARE_BRACKET : response;
                            log.info(RESPONSE_BIND, sn, handler, ip, returnValue == null ? NULL :
                                    returnValue.getClass().getSimpleName() + LEFT_BRACKET + responseString + RIGHT_BRACKET);
                        }
                        return returnValue;
                    }
                };
            }
        };
    }

    @Override
    public ExceptionHandlerExceptionResolver getExceptionHandlerExceptionResolver() {
        final ExceptionHandlerExceptionResolver resolver = new ExceptionHandlerExceptionResolver() {
            @NonNull
            @Override
            protected String buildLogMessage(@NonNull Exception ex, @NonNull HttpServletRequest request) {
                String result = String.format(ERROR_BIND, SN_THREAD_LOCAL.get(),
                        HANDLER_THREAD_LOCAL.get(), IP_THREAD_LOCAL.get(), super.buildLogMessage(ex, request));
                removeThreadLocals();
                return result;
            }
        };
        resolver.setWarnLogCategory(CustomWebMvcRegistration.class.getName());
        return resolver;
    }

    private void removeThreadLocals() {
        SN_THREAD_LOCAL.remove();
        HANDLER_THREAD_LOCAL.remove();
        IP_THREAD_LOCAL.remove();
    }

    private String argsToString(Object[] args) {
        if (args == null) {
            return NULL;
        }

        int iMax = args.length - 1;
        if (args.length <= 0) {
            return SQUARE_BRACKETS;
        }

        StringBuilder b = new StringBuilder(LEFT_SQUARE_BRACKET);
        for (int i = 0; ; i++) {
            var arg = args[i];
            if (arg == null) {
                b.append(NULL);
            } else if (arg instanceof ServletRequest) {
                b.append(SERVLET_REQUEST);
            } else if (arg instanceof ServletResponse) {
                b.append(SERVLET_RESPONSE);
            } else if (arg instanceof MultipartFile) {
                MultipartFile file = (MultipartFile) arg;
                multipartFileToString(file, b);
            } else {
                String argString = arg.toString();
                if (argString.length() > MAX_LENGTH) {
                    b.append(arg.getClass().getSimpleName()).append(TOO_LONG_WITH_BRACKETS);
                } else {
                    b.append(argString);
                }
            }
            if (i == iMax) {
                return b.append(RIGHT_SQUARE_BRACKET).toString();
            }
            b.append(COMMA);
        }
    }

    private void multipartFileToString(MultipartFile file, StringBuilder b) {
        b.append(FILE_START)
                .append(NAME).append(EQUAL).append(file.getName()).append(COMMA)
                .append(ORIGINAL_FILE_NAME).append(EQUAL).append(file.getOriginalFilename()).append(COMMA)
                .append(CONTENT_TYPE).append(EQUAL).append(file.getContentType()).append(COMMA)
                .append(SIZE).append(EQUAL).append(file.getSize())
                .append(RIGHT_BRACKET);
    }

}
