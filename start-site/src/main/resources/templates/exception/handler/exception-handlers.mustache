package {{package}}.exception.handler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
{{#havTx}}
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DuplicateKeyException;
{{/havTx}}
import org.springframework.http.converter.HttpMessageConversionException;
{{#havSecurity}}
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.web.access.AccessDeniedHandler;
{{/havSecurity}}
{{#havValidation}}
import org.springframework.validation.BindException;
{{/havValidation}}
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.multipart.MultipartException;
import {{package}}.exception.BusinessException;
import {{package}}.exception.WarnException;
import {{package}}.exception.SystemException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
{{#havValidation}}
import javax.validation.ConstraintViolationException;
{{/havValidation}}
import java.io.IOException;

@ControllerAdvice
@SuppressWarnings("unused")
public class ExceptionHandlers {

    private static final String SYSTEM_BUSY = "系统繁忙，请稍后再试";
    private static final Logger log = LoggerFactory.getLogger(ExceptionHandlers.class);
{{#havSecurity}}
    private final AccessDeniedHandler accessDeniedHandler;

    public ExceptionHandlers(AccessDeniedHandler accessDeniedHandler) {
        this.accessDeniedHandler = accessDeniedHandler;
    }

    /**
     * 无权限异常
     */
    @ExceptionHandler(AccessDeniedException.class)
    public void exceptionHandler(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {
        accessDeniedHandler.handle(request, response, e);
    }
{{/havSecurity}}
{{#havTx}}
    /**
     * 数据库操作异常
     */
    @ExceptionHandler(DuplicateKeyException.class)
    public Object exceptionHandler(HttpServletRequest request, DuplicateKeyException e) {
        log.error("数据冲突,请检查您的设置", e);
        return ErrorResult.of("数据冲突,请检查您的设置", e.getMostSpecificCause().getLocalizedMessage());
    }

    /**
     * 数据库操作异常
     */
    @ExceptionHandler(DataAccessException.class)
    public Object exceptionHandler(HttpServletRequest request, DataAccessException e) {
        log.error("数据库操作异常", e);
        return ErrorResult.of(SYSTEM_BUSY, e.getMostSpecificCause().getLocalizedMessage());
    }
{{/havTx}}
    /**
     * request解析成文件异常
     */
    @ExceptionHandler(MultipartException.class)
    public Object exceptionHandler(HttpServletRequest request, MultipartException e) {
        return ErrorResult.of("文件解析异常", e.getMostSpecificCause().getLocalizedMessage());
    }

    /**
     * HTTP参数格式不对
     */
    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public Object exceptionHandler(HttpServletRequest request, MethodArgumentTypeMismatchException e) {
        return ErrorResult.of("请求参数有误", e.getLocalizedMessage());
    }

    /**
     * HTTP参数校验不通过异常
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Object exceptionHandler(HttpServletRequest request, MethodArgumentNotValidException e) {
        return ErrorResult.of("请求参数有误", e.getLocalizedMessage());
    }
{{#havValidation}}
    /**
     * HTTP参数校验不通过异常
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public Object exceptionHandler(HttpServletRequest request, ConstraintViolationException e) {
        return ErrorResult.of("请求参数有误", e.getLocalizedMessage());
    }

    /**
     * HTTP参数校验不通过异常
     */
    @ExceptionHandler(BindException.class)
    public Object exceptionHandler(HttpServletRequest request, BindException e) {
        return ErrorResult.of("请求参数有误", e.getLocalizedMessage());
    }
{{/havValidation}}
    /**
     * HTTP请求缺少参数
     */
    @ExceptionHandler(ServletRequestBindingException.class)
    public Object exceptionHandler(HttpServletRequest request, ServletRequestBindingException e) {
        return ErrorResult.of("请求参数有误", e.getLocalizedMessage());
    }

    /**
     * 用错HTTP请求方法
     */
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    public Object exceptionHandler(HttpServletRequest request, HttpRequestMethodNotSupportedException e) {
        return ErrorResult.of("请求方式有误", e.getLocalizedMessage());
    }

    /**
     * 数据格式不正确，比如：JSON字符串格式不对
     */
    @ExceptionHandler(HttpMessageConversionException.class)
    public Object exceptionHandler(HttpServletRequest request, HttpMessageConversionException e) {
        return ErrorResult.of("数据格式不正确", e.getLocalizedMessage());
    }

    /**
     * 线程中断
     */
    @ExceptionHandler(InterruptedException.class)
    public Object exceptionHandler(HttpServletRequest request, InterruptedException e) {
        log.error("出现中断异常", e);
        return ErrorResult.of(SYSTEM_BUSY, e.getLocalizedMessage());
    }

    /**
     * 业务异常
     */
    @ExceptionHandler(BusinessException.class)
    public Object exceptionHandler(HttpServletRequest request, BusinessException e) {
        return ErrorResult.of(e.getLocalizedMessage(), e.haveDetail() ? e.getDetail() : e.getLocalizedMessage());
    }

    /**
     * 警告异常
     */
    @ExceptionHandler(WarnException.class)
    public Object exceptionHandler(HttpServletRequest request, WarnException e) {
        log.error("业务警告：{} , detail：{}", e.getLocalizedMessage(), e.getDetail(), e);
        return ErrorResult.of(e.getLocalizedMessage(), e.haveDetail() ? e.getDetail() : e.getLocalizedMessage());
    }

    /**
     * 系统异常
     */
    @ExceptionHandler(SystemException.class)
    public Object exceptionHandler(HttpServletRequest request, SystemException e) {
        log.error("系统异常", e);
        return ErrorResult.of(SYSTEM_BUSY, e.getLocalizedMessage());
    }

    /**
     * 未处理异常
     */
    @ExceptionHandler(Exception.class)
    public Object exceptionHandler(HttpServletRequest request, Exception e) {
        log.error("出现未处理异常", e);
        return ErrorResult.of(SYSTEM_BUSY, e.getLocalizedMessage());
    }

}
